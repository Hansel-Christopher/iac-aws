name: 'Terraform Plan/Apply'

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main

permissions:
  id-token: write
  contents: read
  pull-requests: write

env:
  AWS_REGION: "ap-south-1"

jobs:
  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup AWS Credentials from GitHub OIDC provider
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-region: ${{ env.AWS_REGION }}
        role-to-assume: arn:aws:iam::893304181614:role/githubaction-hostedrunner-role
        role-session-name: GitHubActionsSession

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_wrapper: false

    - name: Get changed Terraform files
      id: changed-files
      uses: tj-actions/changed-files@v44
      with:
        files: '**/*.tf'

    - name: Determine changed directories
      id: changed-dirs
      run: |
        CHANGED_DIRS=$(echo "${{ steps.changed-files.outputs.all_changed_files }}" | xargs -n 1 dirname | uniq | tr '\n' ',' | sed 's/,$//')
        echo "changed_dirs=$CHANGED_DIRS" >> $GITHUB_ENV
        echo "CHANGED_DIRS=${CHANGED_DIRS}" >> $GITHUB_OUTPUT

    - name: Terraform operations for each changed directory
      run: |
        IFS=',' read -ra DIRS <<< "${{ env.changed_dirs }}"
        set +e
        for DIR in "${DIRS[@]}"; do
          (
            echo "Running Terraform commands in directory: $DIR"
            cd $DIR
            terraform init
            terraform fmt -check
            terraform plan -input=false -detailed-exitcode -no-color -out=tfplan
            terraform show -no-color tfplan > tfplan-output.txt
            echo "::set-output name=tfplan_output_path::$(pwd)/tfplan-output.txt"
          )
        done
      shell: bash
      id: terraform-operations


    - name: Upload all Terraform Plans
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plans
        path: '**/tfplan-output.txt'

    - name: Create and Publish Summary Comments
      run: |
        mkdir -p summaries
        for plan in $(find . -name 'tfplan-output.txt'); do
          DIR=$(dirname "$plan")
          SUMMARY=$(cat "$plan")
          echo "<summary>Terraform Plan Output for `$DIR`:</summary>" >> summaries/summary.md          
          echo '' >> summaries/summary.md
          echo '```' >> summaries/summary.md
          cat "$plan" >> summaries/summary.md
          echo '```' >> summaries/summary.md          
          echo '' >> summaries/summary.md
        done

    - name: Push Terraform Output to PR
      if: github.ref != 'refs/heads/main'
      uses: actions/github-script@v7
      with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const summaryPath = './summaries/summary.md';
            const summary = fs.existsSync(summaryPath) ? fs.readFileSync(summaryPath, 'utf8') : 'No changes detected.';
            const body = `üîç **Detailed Terraform Plan Output:**\n${summary}\n`;
            const comment = await github.rest.issues.createComment({
                issue_number: context.issue.number,
                body: body,
                owner: context.repo.owner,
                repo: context.repo.repo,
            });

            // Add a reaction to the comment
            await github.rest.reactions.createForIssueComment({
                comment_id: comment.data.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                content: 'eyes'
            });
       
                
  terraform-apply:
    name: 'Terraform Apply'
    ## Disabled to avoid infra creation
    # if: github.ref == 'refs/heads/main' && needs.terraform-plan.outputs.tfplanExitCode == 2
    if: false
    runs-on: ubuntu-latest
    environment: production
    needs: [terraform-plan]        
    
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Download saved plan from artifacts  
    - name: Download Terraform Plan
      uses: actions/download-artifact@v4
      with:
        name: tfplan

    # Terraform Apply
    - name: Terraform Apply
      run: terraform apply -auto-approve tfplan
